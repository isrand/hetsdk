import { IEncryptedTopicConfiguration } from './hedera/interfaces/IEncryptedTopicConfiguration';
import { ICreateEncryptedTopicConfiguration } from './hedera/interfaces/ICreateEncryptedTopicConfiguration';
import { StorageOptions } from './hedera/enums/StorageOptions';
import { EncryptionAlgorithms } from './crypto/enums/EncryptionAlgorithms';
import { IKeyPair } from './crypto/interfaces/IKeyPair';
import { IHederaStub } from './hedera/interfaces/IHederaStub';
export declare class EncryptedTopic {
    private readonly encryptedTopicConfiguration;
    private readonly stub?;
    private readonly hederaStub;
    private readonly privateKey;
    private crypto;
    private topicConfigurationMessage;
    private topicMemoObject;
    private topicId?;
    constructor(encryptedTopicConfiguration: IEncryptedTopicConfiguration, stub?: IHederaStub | undefined);
    static generateKeyPair(encryptionAlgorithm: EncryptionAlgorithms): IKeyPair;
    create(createEncryptedTopicConfiguration: ICreateEncryptedTopicConfiguration): Promise<string>;
    addParticipant(publicKey: string, forwardSecrecy?: boolean): Promise<boolean>;
    submitMessage(message: string, medium: StorageOptions): Promise<number>;
    getMessage(sequenceNumber: number): Promise<string>;
    getParticipants(): Promise<Array<string>>;
    rotateEncryptionKey(): Promise<void>;
    migrateConfigurationStorageMedium(): Promise<void>;
    private createTopicMessage;
    private createTopicConfigurationMessageObject;
    private looksLikeFileId;
    private createMemoObject;
    private getCurrentTopicConfigurationMessageVersion;
    private createParticipantsTopic;
    private getEncryptionAlgorithmFromConfigurationMessage;
    private getEncryptionSizeFromConfigurationMessage;
    private setMemo;
    private getEncryptionKeyAndInitVector;
    private setConfigurationMessage;
    private initializeCrypto;
    private getTopicData;
    private getSubmitKey;
    private getEncryptedTopicKeysObjectFromTopicConfigurationMessage;
    private getMessageFromTopic;
    private isBase64Encoded;
}
